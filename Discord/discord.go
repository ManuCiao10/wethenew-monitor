package discord

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"net/http/cookiejar"
	"os"
)

var cookieJar, _ = cookiejar.New(nil)

var client = &http.Client{
	Jar: cookieJar,
}

type Author struct {
	Name    string `json:"name"`
	URL     string `json:"url"`
	IconURL string `json:"icon_url"`
}
type Fields struct {
	Name   string `json:"name"`
	Value  string `json:"value"`
	Inline bool   `json:"inline,omitempty"`
}
type Thumbnail struct {
	URL string `json:"url"`
}
type Image struct {
	URL string `json:"url"`
}
type Footer struct {
	Text    string `json:"text"`
	IconURL string `json:"icon_url"`
}
type Embeds struct {
	Author      Author    `json:"author"`
	Title       string    `json:"title"`
	URL         string    `json:"url"`
	Description string    `json:"description"`
	Color       int       `json:"color"`
	Fields      []Fields  `json:"fields"`
	Thumbnail   Thumbnail `json:"thumbnail"`
	Image       Image     `json:"image"`
	Footer      Footer    `json:"footer"`
}
type AutoGenerated struct {
	Username  string   `json:"username"`
	AvatarURL string   `json:"avatar_url"`
	Content   string   `json:"content"`
	Embeds    []Embeds `json:"embeds"`
}

type Info struct {
	Results []struct {
		ID          int    `json:"id"`
		Brand       string `json:"brand"`
		Name        string `json:"name"`
		Image       string `json:"image"`
		ProductType string `json:"productType"`
		SellNows    []struct {
			ID    int    `json:"id"`
			Size  string `json:"size"`
			Price int    `json:"price"`
		} `json:"sellNows"`
	} `json:"results"`
	Pagination struct {
		TotalPages   int `json:"totalPages"`
		Page         int `json:"page"`
		ItemsPerPage int `json:"itemsPerPage"`
		TotalItems   int `json:"totalItems"`
	} `json:"pagination"`
}

func Webhook(class Info) {
	payload := &AutoGenerated{
		Username:  "PyroPreme Monitor",
		AvatarURL: "https://media.discordapp.net/attachments/742075074445836368/816390776073748540/PyroPreme-03_3.png?width=676&height=676",
		Content:   "",
		Embeds: []Embeds{
			{
				Title:       class.Results[0].Name,
				Description: "In Stock",
				URL:         fmt.Sprintf("https://supremenewwork.com/shop/%d", class.Results[0].ID),
				Color:       7405312,
				Fields: []Fields{
					{
						Name:   "Color",
						Value:  class.Results[0].ProductType,
						Inline: true,
					},
					{
						Name:   "Sizes",
						Value:  class.Results[0].SellNows[0].Size,
						Inline: true,
					},
				},
				Thumbnail: Thumbnail{
					URL: fmt.Sprintf("https:%s", class.Results[0].Image),
				},
				Footer: Footer{
					Text: "PyroPreme",
				},
			},
		},
	}
	payloadBuf := new(bytes.Buffer)
	_ = json.NewEncoder(payloadBuf).Encode(payload)
	webhookURL := os.Getenv("DISCORD_WEBHOOK_URL")
	if webhookURL == "" {
		panic("SET DISCORD_WEBHOOK_URL ENV VAR")
	}
	SendWebhook, err := http.NewRequest("POST", webhookURL, payloadBuf)
	if err != nil {
		log.Fatal(err)
	}

	SendWebhook.Header.Set("content-type", "application/json")

	sendWebhookRes, err := client.Do(SendWebhook)
	if err != nil {
		log.Fatal(err)
	}
	defer sendWebhookRes.Body.Close()
}

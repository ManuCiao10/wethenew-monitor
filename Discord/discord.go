package discord

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"net/http/cookiejar"
	"os"
	"strconv"
	"time"
)

var cookieJar, _ = cookiejar.New(nil)

var client = &http.Client{
	Jar: cookieJar,
}

type Author struct {
	Name    string `json:"name"`
	URL     string `json:"url"`
	IconURL string `json:"icon_url"`
}
type Fields struct {
	Name   string `json:"name"`
	Value  string `json:"value"`
	Inline bool   `json:"inline,omitempty"`
}
type Thumbnail struct {
	URL string `json:"url"`
}
type Image struct {
	URL string `json:"url"`
}
type Footer struct {
	Text    string `json:"text"`
	IconURL string `json:"icon_url"`
}
type Embeds struct {
	Author      Author    `json:"author"`
	Title       string    `json:"title"`
	URL         string    `json:"url"`
	Description string    `json:"description"`
	Color       int       `json:"color"`
	Fields      []Fields  `json:"fields"`
	Thumbnail   Thumbnail `json:"thumbnail"`
	Image       Image     `json:"image"`
	Footer      Footer    `json:"footer"`
}
type AutoGenerated struct {
	Username  string   `json:"username"`
	AvatarURL string   `json:"avatar_url"`
	Content   string   `json:"content"`
	Embeds    []Embeds `json:"embeds"`
}

type Info struct {
	Results []struct {
		Name     string `json:"name"`
		Image    string `json:"image"`
		SellNows []struct {
			ID    int    `json:"id"`
			Size  string `json:"size"`
			Price int    `json:"price"`
		} `json:"sellNows"`
	} `json:"results"`
}

func Webhook(class Info) {
	time := time.Now().Format("15:04:05")
	payload := &AutoGenerated{
		Username:  "Wethenew Monitor",
		AvatarURL: "https://cdn.discordapp.com/attachments/965899789021642752/965899835570016286/DBFF8755-874B-4436-B79A-0C02DDBBEBBA.jpg",
		Content:   "",
		Embeds: []Embeds{
			{
				Title:       class.Results[0].Name,
				// Description: "Sell Now",
				Color : 2895667,
	
				Fields: []Fields{
					{
						Name: "Sizes",
						Value: "[" + class.Results[0].SellNows[0].Size + " | " + strconv.Itoa(class.Results[0].SellNows[0].Price) + " â‚¬" + "]" + "(" + fmt.Sprintf("https://sell.wethenew.com/sell-now/%d?holding-Lab", class.Results[0].SellNows[0].ID) + ")",
						Inline: true,
					},


				},

				Thumbnail: Thumbnail{
					URL: class.Results[0].Image,
				},

				Footer: Footer{
					IconURL: "https://cdn.discordapp.com/attachments/965899789021642752/965899835570016286/DBFF8755-874B-4436-B79A-0C02DDBBEBBA.jpg",
					Text: "Wethenew | Holding-Lab " + time,

				},

			},
		},
	}
	// fmt.Println(payload)
	payloadBuf := new(bytes.Buffer)
	_ = json.NewEncoder(payloadBuf).Encode(payload)

	webhookURL := os.Getenv("DISCORD_WEBHOOK_URL_TEST")

	if webhookURL == "" {
		panic("SET DISCORD_WEBHOOK_URL ENV VAR")
	}
	SendWebhook, err := http.NewRequest("POST", webhookURL, payloadBuf)
	if err != nil {
		log.Fatal(err)
	}
	SendWebhook.Header.Set("content-type", "application/json")

	sendWebhookRes, err := client.Do(SendWebhook)
	if err != nil {
		log.Fatal(err)
	}
	if sendWebhookRes.StatusCode != 204 {
		log.Fatal("Webhook failed to send")
	}
	defer sendWebhookRes.Body.Close()
}
